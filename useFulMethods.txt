Database connection 
Class.forName("com.mysql.cj.jdbc.Driver");
Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/college","root","root");

String sql = "Insert into student (name,email,contact,gender,district,province,batch) values(?,?,?,?,?,?,?)";
			PreparedStatement pstm = conn.prepareStatement(sql);
			pstm.setString(1, s.getName());
			pstm.setString(2, s.getEmail());
			pstm.setString(3, s.getContact());
			pstm.setString(4, s.getGender());
			pstm.setString(5, s.getDistrict());
			pstm.setString(6, s.getProvince()); 
			pstm.setInt(7, s.getBatch()); 
			
			pstm.execute();

Validating email in swing
String email = emailTxt.getText();
String emailRegx = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
if(!email.matches(emailRegx))
{
	display error message..
}

setting timer

import javax.swing.Timer
Timer wariningTimer = new Timer(time,e->{})
if (warningTimer != null && warningTimer.isRunning()) {
		    warningTimer.stop();
		}
		
		warningTimer = new Timer(4000, e -> {
		    warningTxt.setText("");
		});
		warningTimer.setRepeats(false); 
		warningTimer.start();

Displaying data in table 
	private void displayData()
	{
		ProductService service  = new ProductServiceImpl();
		List<Product> plist = service.getAllProducts();
		
		DefaultTableModel tmodel = (DefaultTableModel) table.getModel();
		
		tmodel.setRowCount(0);
		
		for(Product pd:plist)
		{
			tmodel.addRow(new Object[] {pd.getId(),pd.getName(),pd.getPrice(),pd.getCompany()});
			
		}
		
	}

Deleting row from table:
		JButton btnDelete = new JButton("Delete");
		btnDelete.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(table.getSelectedRow()<0)
				{
					showMessage("Select row to delete");
					return;
				}
				
				int srow = table.getSelectedRow();
				int sid = (int) table.getModel().getValueAt(srow,0);
				StudentService service = new StudentServiceImpl();
				service.deleteStudent(sid);
				showMessage("Student deleted successfully",Color.GREEN);
				displayData();
				return;
			}


What after adding? 
	JButton btnAdd = new JButton("Add");
		btnAdd.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				clearForm();
				 JFrame addStudent = new AddStudent();
			        addStudent.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE); // ensure it triggers windowClosed
			        addStudent.addWindowListener(new WindowAdapter() {
			            @Override
			            public void windowClosed(WindowEvent we) {
			                displayData(); // now this runs AFTER the AddProductForm is closed
			            }
			        });
			        addStudent.setVisible(true);
				
				
			}
		});
		btnAdd.setFont(new Font("Tahoma", Font.PLAIN, 18));
		btnAdd.setBounds(856, 510, 99, 27);
		contentPane.add(btnAdd);
		
date
    dateTxt.setText(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")).toString());
time
    timeTxt.setText(LocalDateTime.now().format(DateTimeFormatter.ofPattern("HH:mm:ss")));

		 Timer timer = new Timer(1000, e -> {
	            LocalDateTime now = LocalDateTime.now();
	            timeTxt.setText(LocalDateTime.now().format(DateTimeFormatter.ofPattern("hh:mm:ss a")));
	            dateTxt.setText(LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd")).toString());
	        });
	        timer.start();


doPost()

	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
//		doGet(request, response);
		
		String un = request.getParameter("username");
		String password = request.getParameter("password");
		
		if(un.equals("hari") && password.equals("123"))
		{
			
			//sent data from servlet to jsp
			request.setAttribute("uname",un);
			request.getRequestDispatcher("profile.jsp").forward(request, response);
		}
		else
		{
			request.getRequestDispatcher("loginForm.jsp").forward(request, response);
		}
		
	}

	 */
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// TODO Auto-generated method stub
//		doGet(request, response);
		
		String un = request.getParameter("username");
		String password = request.getParameter("password");
		
		if(un.equals("hari") && password.equals("123"))
		{
			
			//sent data from servlet to jsp
			request.setAttribute("uname",un);
			request.getRequestDispatcher("profile.jsp").forward(request, response);
		}
		else
		{
			request.setAttribute("message","user not found");
			request.getRequestDispatcher("loginForm.jsp").forward(request, response);
		}
		
	}

How to make columns of sql case sensative ? using collate utf8mb4_bin;
ALTER TABLE USER
MODIFY username VARCHAR(50) COLLATE utf8mb4_bin,
MODIFY PASSWORD	VARCHAR(50) COLLATE utf8mb4_bin;


JSTL
<c:forEach var="u" items="${ulist}">
<tr bgcolor="skyblue">
<td>${u.id }</td>
<td>${u.fname }</td>
<td>${u.lname }</td>
<td>${u.username }</td>
<td>${u.password }</td>
</tr>
</c:forEach>



creating a bean ?
Bean is simply the object of java
how's created ? 
	we create java object as 
		Product pd = new Product()
	So creating a bean
	<bean class="com.di.Product" id="pd">
		<constructor-arg value="8888"/>
		<constructor-arg value="Mobile"/>
		<constructor-arg value="90000"/>
		<constructor-arg value="Apple"/>
    </bean>

	here the class Product have a parametrized constructor as follow:
	Product(int id, String name, int price, String company)
	{
		......
	}
		
	that's the reason why we are using <constructor-arg value="8888"/> to provide the value in constructor


Calling bean / creating it through constructor injection
	ApplicationContext context = new ClassPathXmlApplicationContext("beans.xml")
	Product p = (Product) context.getBean("pd");

Creating bean with setter injection
    <bean class="com.di.car" id="cr">
		<property name="color" value="Blue"/>
		<property name="price" value="600000"/>
		<property name="company" value="Tesla"/>
    </bean>


In annotation way of creating beans:
use @Component(value="abc") // if value is not provided then id will be name of class itself
ApplicationContext context = new AnnotationConfigApplicationContext(AppConfig.class)
College c = context.getBean("abc",College.class)

alternatively we can create a bean via annotation in method level as
	@Bean
	public Student getStudentBean()
	{
		return new Student();
	}



displaying data in table using thyemeleaf:
<tr th:each="user: ${ulist}">
<td>[[${user.fname}]]</td>
<td>[[${user.lname}]]</td>
<td>[[${user.username}]]</td>
<td>[[${user.password}]]</td>
</tr>

connecting to db via spring boot
spring.application.name=springTestDemo
# database config
spring.datasource.url= jdbc:mysql://localhost:3306/spdb/?createDatabaseIfNotExist=true
spring.datasource.username=root
spring.datasource.password=root

#3 ---------- JPA / Hibernate config ------------

spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true



creating table using lombok 
package com.appsoft.springDemo.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table(name="user_tbl")
public class User {
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	private int id;
	private String fname;
	private String lname;
	
	@Column(unique = true)
	private String username;
	private String password;
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getFname() {
		return fname;
	}
	public void setFname(String fname) {
		this.fname = fname;
	}
	public String getLname() {
		return lname;
	}
	public void setLname(String lname) {
		this.lname = lname;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
}

Encryption technique / password encryption
	u.setPassword(DigestUtils.md5DigestAsHex(u.getPassword().getBytes()));


Creating a session
	public String postLogin(@ModelAttribute User u, Model model, HttpSession session)
	{
		session.setAttribute("activeUser",u);
		session.setMaxInactiveInterval(120);
	}

In order to check if the session is active or not
	public String getGallery(HttpSession session)
	{
		if(session.getAttribute("activeUser" != null))
		{
			then give access.......
		}
		else
		{
			no access granted....
			redirect to login
		}
	}

Session methods:
	session.addAttribute("activeUser",user);
	session.addAttribute("userName",user.getUserName());
	session.removeAttribute("userName");
	session.invalidate();
	session.setMaxInactiveInterval(200);

Sending emails:
	@Component
	public class EmailUtils {
		
		@Autowired
		private JavaMailSender mailSender;
		
		public void sendEmail(String toEmail, String subject, String message)
		{
			SimpleMailMessage email = new SimpleMailMessage();
			email.setTo(toEmail);
			email.setSubject(subject);
			email.setText(message);
			
			mailSender.send(email);
		}
	}