********************************************	01/08	Day 1 ***************************************
--All programming languages are software
--James osling developed java in 1991.	
--Java 1st version in 1996 JDK-1
--Where to write java code ? 
	Editor -> BlueJ, Doctor Java, Sublime Text
	IDE -> Eclipse, Intellij, STS, Netbeans, VS code
download from https://spring.io/tools

compile java source code using javac <FileName>.java
run the compiled source code of java <className>.class file via java <className>


****************************************************** 01/09 Day 2 ***************************************

Main method is for the execution purpose only NOT for compilation 	
delimeters ----> {,},;,(,), and so on.........
keywords
identifiers 
public --> access everywhere
protected --> class,same packages and child classes of different packages too.
default ----> access in class and same packes only.
private ----> access in class only.


*************************************************** 01/10 Day 3 ***************************************************

Data Type
proper data representation
proper memory allocation
proper operation to be performed

Types:
	Primitive. :
		byte,short,int,long,float,double,char,boolean.
	Non-Primitive.
		String,Array,Classes,Collection,Date,Enums,


Primitive types and their wrapper class covered all
		    byte 		Byte
		    short 		Short
		    int			Integer
		    long		Long
		    float		Float
		    double		Double
		    char		Character
		    boolean		Boolean

auto boxing
		    int k = 343;
		    Integer p = k; //auto-boxing ---> providing methods of wrapper to p using value of k

auto unboxing
			    Integer p = 3434;s
			    int k = p // auto unboxing.

 BigInteger
 BigDecimal
	BigInteger a= BigInteger.valueOf(Long.MAX_VALUE);
		BigInteger b= BigInteger.valueOf(Long.MAX_VALUE);
		BigInteger c = a.add(b);
		System.out.println(c);



***************************************************** 01/11 Day 4 ***********************************************************
Package:
	collection of related classes and interfaces.
	other then java.lang package should be imported.
	java.lang ----> default package.

Type Casting: 
	implicit casting  -------> Automatically casted by java compiler.
		byte -> short -> int -> long -> float -> double

	explicit casting --------> should be casted by user using syntax 
		syntax:
			data_type var = (data_type) value;

		double -> float -> long -> int -> short -> byte -> char

		explicit casting is required when we want to convert a data types with higher size to smaller size.
		example: float number = 12.343f;
				int myNumber = (int) number //myNumber = 12
				int a = (int) 12.234f; 
				
Pre and post increment.  ++a and a++
		int a= 10;
		System.out.println(a++);
		System.out.println(a = a+5);
		
		System.out.println(++a);
		System.out.println(++a + a++);
		System.out.println(a);
	
Control Statement.
		Use to implement conditions in program
		
		Types
		1. Selection (Decision Making)
			a.if
				Syntax:
					if(condition)
					{
						body to execute if condition evaluates true.
					}
			b.if-else
			c.nested if else
			d.else if (if-else ladder)
			e.switch
		
		2. Looping(iteration)
			a.for
				a.1. forEach loop
			b.while
			c.do-while
		3. Jumping (Branching)
			a.break
			b.continue;
			c.return

		 

************************************************* 01/12 Day 5 ****************************************************

if-else
	# use to implement exactly two conditions.
	# syntax:
	if(condition)
	{
		//code to execute if the condition evaluates true
	}
	else
	{
		//code to execute if the condition evaluates to false
	}

Nested if-else
	#syntax:
		if(condition1)
		{
			if(condition2)
			{ 
				if(condition 3)
				{
					//code to execute if all conditions 1,2 and 3 are evaluated as true.
				}
				else
				{
					//code to execute if condition1 and condition2 are true but condition 3 is false
				}
			}
			else
			{
				//code to execute if condition 1 is true but conditioon2 is false
			}
		}
		else
		{
			//code to execute if condition1 is false.
		} 


if else ladder / else if
	# syntax:
		if(condition 1)
			{
			code to execute if condition1 evaluates to true
			}
		else if(condition 2)
			{
				code to execute if condition2 evaluates to true
			}
			else if(condition 3)
			{
				code to execute if condition3 evaluates to true.
			}
			......
			else
			{
			code to execute of none of the condition evaluates to true.
			}
		
Switch
	#Syntax:  
		switch(variable)
		{
			case 1:
				// satements
				break;
			case 2:
				//statements
				break;
		.
		.
		.
		.
		.
		.
			default:
				//stmt
				break;
		}

		Alternative syntax from java12 and above.....
		datatype variableName = switch(vairable)
		{
			case 1 -> value1;
			case 2 -> value2;
			.
			.
			..
			.
			default -> value3; 
		}
		  
   
		    	

****************************************************** 01/14 Day 6 ***************************************************************
for loop
	#syntax:
		for(initialization;condition;updation)     // updation---> increment/decrement.
		{
				body
		}

forEach loop	
	   #used to read data from collection (array, map,list,set etc)
	   
	   Syntax:
	   for(dataType var:collection)
	   {
	    	body...
	   }

while loop
 	#syntax
   			while(condition)
   			{
   				//statements
   				updation (increment/decrement)
   			}


do while loop
	Syntax:
  		do
		   {
		    // statement
		    updation..
		    }while(condition);

break
	break the flow of loop / exit out of loop
	syntax:
		break;
continue
	skips the current iteration of loop and jumps to next iteration.
	syntax:
		loop;
return
	returns the control/flow of program to the function calling point/line.
	syntax:
		return;
		return <value>;




****************************************************** 01/15 Day 7 ***************************************************************
Methods.
	# use for code re-usability.
	# lines or block of code used to perform specific task in the program.
	# In Java, there are no stand alone functions. Every function must be associated with a class,
	and therefore, they are referred to as methods. Java does not have "free functions" like in some other languages.
	#Syntax:
		returnType methodName(arg1,arg2,.....argn)
		{
			// statements..
		}
	# return_type:
			a. void			:		no value(result) return from method. 
			b. non-void		:		value(result) return from method.
	
	# types of function
		1. no return type with no parameters.
			eg: void sum()
				{
					//statements...
				}
		2. no return type with parameters.
			 void printTable(int n)
			{
				System.out.println("Multiplication table of "+n+" :");
				for(int i=1;i<=10;i++)
				{
					System.out.println(n+" X "+i+" = "+n*i);
				}
			}
		3. return type with no parameters.
			 int getSum1To100()
			{
				//code to find sum...
			}
		4 return type with parametrs.
			 int findLargets(int a,int b, int c)
			 {
				// code to find the largetst one.....
			 }



****************************************************** 01/16 Day 8 ***************************************************************
Array           ------> Collection of homogeneous data.
				------> Group of multiple values of same data type with fixed size.
				Can contain duplicate data also.
				Contagious memory allocation.
				array is an object in java (implicitly)

			#Syntax:
					data_type  array_name[]  = new data_type[size]

					  Or
					data_type[] array_name = new data_type[size];

					String[] cities = new String[100];
					float [] height = new float[500000];
					char  alphas[] = new char[26];
					Dog dog[] = new Dog[200];


	when to use array?
		  	multiple values (greater than 3)
		  	having same dataType
		  	Fixed number of values
	

**********************************************************01/17 Day 9 *****************************************************************
Array with method
	a. Array as argument :
		void sum(int[] array)
		{
			//
		}
		here we are passing an array of integer in method sum.
	b. Array as return type
		int[] get20Numbers()
		{
			//array = 20,10,12,13,43....
			return array;
		}

		// we are returning array of integer from the method named get20Numbers()

MultiDimensional Array
	# use to manage data in row and column format/tabular/matrix format.
	# Syntax:
		data_type array_name[][] = new data_type[rows][cols];

		e.g:
			int mat[][] = new int[2][2];

		
		inserting data in array:
			use nested for loop
			for(int i=0;i<array.length;i++)
			{
				for(int j = 0;j<array[i].length;j++)
				{
					array[i][j] = valueToInsert;
				}
			}

		reading data from array

		//method 1
		for(int[] x:array)
		{
			for(int y:x)
			{
				sysout(y);
			}
		}

		//method 2
		for(int i=0;i<array.length;i++)
		{
			for(j=0;j<array[i].length;j++)
			{
				sysout(array[i][j])
			}
		}

		//method 3
		for(int[]x:array)
		{
			sysout(Arrays.toString(x))
		}



Methods of Arrays.
	1. Sorting
		Arrays.sort(arrayName);
		sorts the array in ascending order.

	2.fill
		Arrays.fill(arrayName,value)
		fills the entire array with the value mentioned.
	
	3.fill in range
		Arrays.fill(arrayName,startIndex,endIndex,value);
		fills the array with value in the range endIndex excluded.
	
	4.copy within range
		Arrays.copyOfRange(arrayName,3,12)
		copies the old array to new array within specified range.

*********************************************************** Day10 01/19***************************************************************
OOP - Object oriented Programming.
1. Class and Object
	2. Encapsulation
	3. Inheritance
	4. Polymorphism
	5. Abstraction
		a. Abstract Class
		b. Interface

Class
	Use to represent real world entity/things.
	Class contains properties and methods (State/behave)
	Class is a collection/group of objects having similar behaviors.
	Class is a blue print/template of object.
	Class is a user defined/reference data type.

	Syntax:
		class className{
			//properties
			//methods.
		}


Object/Instance
	implementation of class.
	instance of class.
	object contains instance variable and instance methods.
	object allocates memory.

	Syntax:
	className objectName = new className();	
	OR
	new className();
	

*********************************************************** Day11 01/21***************************************************************
Constructor
    use to create an object in java.
    special type of method which has same name as class name.
    It has no return type.
    If there is no any user defined constructor in class then, Java provides default constructor to create an object.

Types
    default constructor.
        use to create object and set default values to object
        syntax:
            class_name()
            {
                //set default values to object.
            }
    parameterized constructor.
        use to create object and set dynamic values to object.
        syntax:
            class_name(args1,args2,arg3,...................,argn)
            {
                //set dynamic values to object.
            }

this
    this keyword represent current object.
    we can call following through this:
        instance variables, -----------> this.name = "aryal"
        instance methods, -------------> this.displayName();
        constructors. -----------------> this() / this("keshab",444);
                constructor DO RETURN a value and its a object being created...



***************************************************************Day 12 1/22*******************************************************************
Static Keyword:
	Class's property.
	Static variables are crated during class loading.
	all the objects can alter the static variable  (generally done with the class only)
***************************************************************** Day 13 1/23****************************************************************
Encapsulation:
	Data hiding and data binding process.
	To achieve encapsulation:
			1. Declare properties of class as private (i.e data hiding).
			2. Create public getters and setters methods to get and set values to private properties.

	Syntax
		POJO (Plain old Java Object) or model class ------> class with private properties and public getter and setter
		class class_name{
			//private properties
			//public getters and setters
		}

	Setter:
		Use to set the values of private property of class
		syntax:
			public setId(int id)
			{
				this.id = id
			}

	Getter:
		use to get the values of property of class
		Syntax:
			public int getId()
			{
				return this.id;
			}
	
Inheritance
	Use for code reusability
	Process of accessing properties and methods of parent/super/base class to child/sub/derived class is known as inheritance.
	Also known as is-a relationship.

	Its a generalization to specialization process.
	also known as value change of class.
	extends keyword is used in inheritance.
	private (properties/methods) and constructor are never inherited.
	We can inherite only one class at a time
	Multiple inheritance not exist in java with class.

	Syntax:
		childClassName extends parentClassName{
			//properties ... = parent + child
			//methods... = parent+child
		}

***************************************************************** Day 14 1/24****************************************************************
Array of Object
	Syntax:
		className arrayName[] = new className[size];

		int[] values = new int[400];
		Student stds[] = new Student[200];
		Cow cows[] = new Cow[50];
		Product[] prods = new Product[5000];


***************************************************************** Day 15 1/25 **************************************************************
Object with method
	1. Object as parameter
			void printCustomer(Customer c)
			{
				...................
			}
	2. Object as return type
			Customer getCustomerData()
			{
				Customer c = new Customer();
				.....
				return c;
			}

Method Overriding.
	runtime polymorphism.
	there must be is a relationship.
	method name,return type and list of parameters same as parent class but implementation is different in child class is known as method
	overriding

	Also known as value change of method.
	We can n't override final method.

*****************************************************Day 16 01/28 ************************************************************************

Aggregation -------> has a relationship (one class has another class as its field)
	1. Composition ---->  tightly binding (Inner class concept.)
Realization ----> relation like interface and normal class implementing it.

Abstraction:
	Process of hiding implementation details in the program.
	To achieve abstraction :
		1. Abstract class
			# Class which contains abstract methods and non-abstract methods.
			# Syntax:
				abstract class className{
					//abstract methods
						abstract int getArea(int l,int b);
					//non abstract method
						void sms()
						{
							System.out.println("Sms sent");
						}
				}
			# Abstract method
					Method which doesn't have body/implementation.
				# Syntax:
					Abstract returnType methodName(args);

				# Every abstract class must have at least one child class and child class must override abstract methods.
				# We can n't create object of abstract class.
				# level of abstraction 0-100% 


*****************************************************Day 17 01/29 ************************************************************************
2. Interface.
	# Use to achieve abstraction.
	# Same as class which contains public abstract methods and public static final (i.e. constant)
	
	# every interface must have at least one implementation (impl class) must override abstract methods.

	# we can n't create object of Interface
	# 100% abstraction.
	# multiple inheritance support in java with interface.

	# Syntax :
		interface interfaceName{
			// fields which are static and final by default.

			// methods which are public and abstract
		}

	# Marker interface
		Interface without any abstract methods. Empty interface, e.g: Serializable interface
	
	# Functional Interface
		Interface with only one abstract methods in it.

	# Adapter Class
		Those class which implements interface but function body are empty.
			Why ?
			So that the subclass can only override those methods required.

*****************************************************Day 18 01/30 ************************************************************************
Collection: (Java collection / Collection Framework)
	# Use to store and process dynamic multiple data/objects.

	1. List : Dynamic Array
		a. ArrayList         : Slow processing , better to use for data storage
		b. LinkedList 		 : Fast processing, better to use for data processing.

	2. Set  : Collection unique data
		a. HashSet           : Unique data only.
		b. TreeSet           : Unique + sorted
		c. LinkedHashSet     : Unique + insertion in order.

	3. Map  : Data managed in key,value pair.
		a. HashMap           : (key,value) pair 
		b. TreeMap			 : (K,V) pair and Sorted.
		c. LinkedHashMap     : (K,V) pair and insertion in order


*****************************************************Day 19 01/31 ************************************************************************
How is project made in industry level ?
	Have 3 base packages: 
		com.model ----> keep those class whose data is processed (in school system student,teacher etc data is processed) (POJO classes private fields and getter/setter method)
		com.service -----> contains interface and implementation (impl) class
		com.view ------->  calling methods made in service (later UI)
			if database is required add com.database
			if controller is required add com.controller

*****************************************************Day 20 02/01 ************************************************************************
Install MYSQL workbench
Instal SQLyog


*****************************************************Day 21 02/02 ************************************************************************
JDBC -> Java Database connection.
	1. Database config.
		a. Register Driver
		b. getConnection(url,uname,psw)

	2. Transaction (R/W)
		a. write sql
		b. create statement / prepared statement.
		c. execute sql
		d. close db

*****************************************************Day 22 02/04 ************************************************************************
Practiced adding items to database and manipulating them..


*****************************************************Day 23 02/05 ************************************************************************
Java swing
	# use to create UI/GUI/frontend for desktop application in java.

	#UI components:
		- JFrame
		- JPanel
		- JButton
		- JTextField
		- JLabel
		- JRadioButton
		- JCheckBox
		- JTable
		- JMenu
		- JPasswordField

*****************************************************Day 24 02/06 ************************************************************************
Method for getting text from textfield of swing: <textFieldName>.getText();
Method for getting an item from a combo box (drop down list): <comboBoxName>.getSelectedItem().toString();
				for checking if any option are selected or not: <comboBoxName>.getSelectedIndex() > 0

*****************************************************Day 25 02/07 ************************************************************************
Made a UI for viewing and deleting records from db.
*****************************************************Day 26 02/09 ************************************************************************
Deleted records from table.
*****************************************************Day 27 02/011 ************************************************************************
Exception Handling in java.
	compile time checked exception.
	run time unchecked exception.
		try
		catch
		throw
		throws 
		finally
*****************************************************Day 28 02/012 ************************************************************************
File Handling
	a. FileInputStream   - read file
		FileInputStream file = new FileInputStream("./src/fileHandling/newFile.txt",true) ----> First arg: path of file, second arg ---> appending into file.
	b. FileOutputStream  - write/create file

	FileReader  - read file
	FileWriter 	- write file

*****************************************************Day 29 02/014 ************************************************************************
Multithreading
	Small Part of process which has separate path of execution is known thread.

How to create thread ?
	a. Extending thread class
	b. Implementing Runnable interface

*****************************************************Day 31 02/020 ************************************************************************
Advanced JAVA
JEE/J2EE/Advanced Java


HttpRequest (Method):
1. GET
	-> default request
	-> not secure
	-> data limit.
	-> Use to get data from server to client.
	-> Use to open view form.
2. 	POST
	-> method = "post"
	-> secure
	-> use to send data from client to server.

Web Server
	-> To run dynamic web application
	-> TomCat

Application Server
	-> sms server
	-> mail server
	-> gmail server

Java Framework for web application:
1. Jsp, servlet
2. EJB
3. Strut
4. Spring MVC
5. Spring Boot  -----> Used in nowadays in tech company.


Where view ?		src/main/webapp
Where java			Java Resources/src/main/java/<make packages and do there>

*****************************************************Day 32 02/021 ************************************************************************
Servlet
	# use to create dunamic web apps.
	# Its a server side technology of java
	# Also used in processing HTTP request.
	
	# Syntax:
	
	@WebServlet("/url-pattern)
	class class_name extends HttpServlet{

		// get request
			void doGet(HttpServletRequest request,HttpServletResponse response)
			{

			}

		//post request
			void doPost(HttpServletRequest request,HttpServletResponse response)
			{
				
			}

		
	}

*****************************************************Day 33 02/022 ************************************************************************
send data from servlet to jsp

*****************************************************Day 34 02/023 ************************************************************************
Stored data in db fetched from jsp to servlet to db.
Signup form -> Data stored in db
and login form -> data extracted from db. 
*****************************************************Day 35 02/025 ************************************************************************
Login implementation
Retrieving data from db.

*****************************************************Day 36 02/026 ************************************************************************
JSTL


*****************************************************Day 37 02/027 ************************************************************************
								Maven Framework/ Tool
Benefits of using tools
1. Faster and easier development.
2. Uniform Environment.

Why Maven ? 
	Maven developed by Apache company
	Dependency management tool
	Project management tool

Dependency
	Jar files
		- Java Programs
	Third party jar file (Files not in jdk, not developed by java) -> JSTL , MySQL jar file

We'll make maven project from now onwards

When maven project is made we get POM.xml
POM.xml
	-> Registration of third party jar files.
	How to register?
	<dependencies>

		<dependency>
			<groupId>company name </groupId>
			<artifactId> project name </artifactId>
			<version> latest released format of that project </version>
		</dependency>

		......
		.
		....
		...
		.

	</dependencies>


Maven internal Process
Remote Repository ----------> Central Repository(mvnrepository.com) ------------------> POM.xml ------------------------> Local Repository
							  
*****************************************************Day 38 02/028 ************************************************************************
									ORM (Hibernate) Framework
Object Relational Mapping
	Deals with DB.
	Similar to oop. (like to use oop we use java,c++,python), i.e ORM is also a concept about configuration of db
	ORM implementing tools hibernate , ibities, MyBatis
	ORM - Mapping object to database


Java Class <-------------------> Hibernate/ Data Layer / JPA <---------------> Database (Mysql)
Use annotations
@Entity
@Table(name="student_tbl")


@Column ---> to make field column of table
@Id ----> to make field primary key
@GeneratedValue ---> To make auto incrmentation used with @Id

@Column(name="FirtName");
private String fname

Class being mapped to db called persistance class

Methods:
to add row : save()
to delete a row: delete()
to update a row: update()
to list : list () 

configuration file:  hibernate.cfg.xml

*****************************************************Day 39 02/029 ************************************************************************
Making connection with hibernate
		SessionFactory sf = new Configuration().configure().buildSessionFactory();
		Session sess = sf.openSession();
		sess.beginTransaction();
		
		Student s = new Student();
		s.setFname("Kamal");
		s.setLname("karki");
		s.setAge(33);
		s.setCollege("kec");
		s.setCity("kathmandu");
		
		sess.save(s);
		
		sess.getTransaction().commit();
		
		sess.close();

*****************************************************Day 40 02/30 ************************************************************************
										Mapping / Relationship
1. OneToOne
2. OneToMany
3. ManyToMany

Operations performed in respect to these 3 relations.


*****************************************************Day 41 03/01 ************************************************************************
Spring Framework 
1. used to create a dynamic web application in java
2. its a packaged framework
3. it contains all components that required to create web application.


1. Spring Core  core concept
2. Spring MVC (too much xml config.) not used.
3. Spring Boot (no xml config) used nowadays.


Spring Core
	1. Bean
		-> Its Java Object which is controlled by spring container
		
	2. DI / IoC:  (Dependency Injection / Inversion of Control)
		a. Constructor Injection
		b. Setter Injection


	Two ways of making a bean and Injecting value in it
		a. By using xml file
		b. By using Annotation
	
	Group -> Company Name  (e.g: com.monsterkaley)
	artifactId -> Project name
	version -> version itself.

Whose beans to create ? 
	Components of a system.

*****************************************************Day 42 03/04 ************************************************************************
Using annotation to create a bean 

@Component(value="clz")  // ----> Equivalent of creating a bean via <bean> </bean> in xml based 
public class College {
	@Value("KEC")
	private String name;
	@Value("0152354")
	private String phone;
	
	public void printCollege()
	{
		System.out.println("College name = "+name);
		System.out.println("College Phone = "+phone);
	}
		
}
here the annotation @Value("KEC") is the default value of the name of college


@configuration --> used to start spring container
@ComponentScan(basePackages = "com.annot") --> here the componentScan is used for informing spring controller to control the classes under com.annot package
@Autowired --> bean injection
@Qualifier("mathTSImpl") --> explicitly assigning the bean
@Primary ---> used to state default bean
@Scope("singleton") // only one object/instance of a class
@Scope("prototype") // creates different object/instance of a class based on the request


*****************************************************Day 43 03/05 ************************************************************************
MVC with Spring Boot

Technologies available to use MVC in spring
	Spring Boot
	Thymeleaf / view template
	Spring Data JPA
	Maven
	Log4j
	Lombok
	Boot strap template

@Controller
@GetMapping


*****************************************************Day 44 03/06 ************************************************************************
@PostMapping()
@ModelAttribute User U, Model model
model.addAttribute("uname",u.getUserName())

*****************************************************Day 45 03/08 ************************************************************************
We can send the data from controller to viewer via following
@PostMapping
public String postSignUp(@ModelAttribute User u, Model model)
{
	model.addAttribute("user",u);				// entire object is passed to viewing page.
	return "Profile";
}

To take a value from a form which is not in the pojo class
@RequestParam("gender")String gender
*****************************************************Day 46 03/09 ************************************************************************
SQL operations with spring boot
how to connect db in spring boot ?
	a. Spring Data JPA
		-> Hibernate + Spring database API 
	b. Database driver (mysql driver)

*****************************************************Day 47 03/10 ************************************************************************
Spring demo project
	lombok -> Used for handling getter and setter of a class.

how implement any module? 
	1. POJO
	2. Map to db/apply jpa
	3. Repository. (DAO ---> Data access object)
	4. Service.
	5. ServiceImpl
	6. Controller
	7. View Design/ Form

DTO --> Data transfer object.	

Started a new project 
created a User module

*****************************************************Day 48 03/11 ************************************************************************
Why lomobk?
annotations that lombok provide:
	@Getter
	@Setter
	@ToString
	@AllArgsConstructor
	@NoArgsConstructor
	@Data -----> generates all (getter, setter, toString) at once

Created a department module
Got started with bootstrap
learned to create own methods in jpa (made some queries)
*****************************************************Day 49 03/12 ************************************************************************
Added DepartmentList table
Encrypted password using md5 encryption
performed add and update operation
*****************************************************Day 50 03/15 ************************************************************************
Designed pages through bootstrap
*****************************************************Day 51 03/16 ************************************************************************
Created a new entity Employee along with its repo , attributes and methods.
*****************************************************Day 52 03/17 ************************************************************************
project continuation, added edit form for department
*****************************************************Day 53 03/18 ************************************************************************
Implemented Gallery tab and uploaded image
**********************************************************************************************************************************************
																														Notes Maintained by:
																														Keshab Aryal